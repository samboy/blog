<div class=blogpic>
<img src=pics/2013-07-blog-square.jpg width=120 height=120>
</div>

<h1>More on SipHash</h1>
<h2>October 9, 2013</h2>
This blog attempts to better explain why SipHash was created.

<p>

<A name=SipHash_in_Javascript></A><A name=SipHashinJavascript></A><span class=moyet>==</span><span class=blogtitle><b>SipHash in Javascript?</b></span><span class=moyet>==</span>

<p>

There is, believe it or not, a
<a href="https://npmjs.org/package/siphash">Javascript implementation of SipHash</a>.
While an interesting thought experiment, SipHash really isn’t an
algorithm for running in a high-level scripting language.  It’s an
algorithm for low-level languages like C, 
<a href="http://llvm.org/docs/LangRef.html">LLVM</a>, or assembler.

<p>

What should be using SipHash is not a script, but the underlying engine
running a script.

<p>

<A name=The_type_of_code_that_would_use_SipHash></A><A name=ThetypeofcodethatwoulduseSipHash></A><span class=moyet>==</span><span class=blogtitle><b>The type of code that would use SipHash</b></span><span class=moyet>==</span>

<p>

Most high-level scripting language have a data type called either an
“associative array”, a “hash”, or a “dictionary”.  This data type allows
a collection of data to be indexed by a string in addition to being
indexed by number.

<p>

Here is how a dictionary is used in Python:

<p>

<tt>last_name = {}</tt><br>
<tt>last_name["John"] = ["Smith"]</tt><br>
<tt>last_name["Debby"] = ["Harry"]</tt><br>
<tt>last_name["Miley"] = ["Cyrus"]</tt><br>
<tt>last_name["Tom"] = ["Hanks", "Cruise"]</tt><br>

<p>

Here, “last_name” is a collection of last names, indexed by the person’s 
first name.  It lets us know that, in our circle of friends, there are
two Toms: Tom Hanks and Tom Cruise.

<p>

<A name=Under_the_hood></A><A name=Underthehood></A><span class=moyet>==</span><span class=blogtitle><b>Under the hood</b></span><span class=moyet>==</span>

<p>

Computers, at a low level, do not index data by string, but instead index
data by number.  Under the hood, Python has special code that converts
a string in to a number, and then puts the data in a “hash bucket” with
that number.

<p>

<A name=The_problem_SipHash_solves></A><A name=TheproblemSipHashsolves></A><span class=moyet>==</span><span class=blogtitle><b>The problem SipHash solves</b></span><span class=moyet>==</span>

<p>

The underlying code for converting a string in to a number is designed
to not have a lot of strings converted in to the same number.  If this
assumption is broken, then certain types of attacks are possible.

<p>

Until SipHash came out last year, programmers had to resort to using
ad-hoc methods to convert strings in to numbers in a way that was
hard for attackers to guess.  Deadwood, for example, uses a method
that is secure assuming that the attacker does not know the numbers
strings are being converted in to.

<p>

The reason Deadwood uses an ad-hoc method instead of a real cryptographic
primitive was because there was not, when I designed Deadwood in 2007,
a way of very quickly generating a small random number from a string
using a cryptographic primitive.  Indeed, I observed, while designing
Deadwood in 2007, that “the quick and dirty hash [that Deadwood uses] is 
between 750 and 1400 times faster than Radio Gatun” for hashing short
strings.

<p>

SipHash solves the very particular problem of implementing a hash data
type in a low-level language where it’s important the “hash compression”
function (the code that converts a string in to a number) is one where
an attacker can not guess what number a given string will generate, even
if they somehow know the numbers generated by other strings.

<p>

<A name=See_also></A><A name=Seealso></A><span class=moyet>==</span><span class=blogtitle><b>See also</b></span><span class=moyet>==</span>

<p>

<a href="http://www.samiam.org/blog/20131006.html">My SipHash implementation</a>
<a href="http://www.samiam.org/blog/20131004.html">SipHash</a>
<p>

<i>To post a comment about this blog entry, <A 
href="/comments-closed.html">go to the forum</A>
(<A 
href="/comments-closed.html">self-signed https</A>).
New accounts may post once I approve the account.  
</i>

<p>

<A href=/blog/>Blog index</A>

</div>
